<style>

</style>
<section class="section-box">
  <div class="media-evaluation-box">
    <div class="media-evaluation-marquee marquee-box">
      <div class="media-evaluation-list marquee-box-list">
        {%- for block in section.blocks -%}
          <div class="media-evaluation-item marquee-box-item to-top" style="transition-delay: 0.{{forloop.index}}s">
            <div class="media-evaluation-txt-top">
              <div class="media-evaluation-txt">{{ block.settings.text }}</div>
            </div>
            <img loading="lazy" class="media-evaluation-logo" width="{{ block.settings.image.width }}" height="{{ block.settings.image.height }}" {%
              render 'image-attributes' , image: block.settings.image %} alt="{{ block.settings.image.alt | escape }}">
          </div>
        {%- endfor -%}
      </div>
    </div>
  </div>
</section>
<script>
  function enableDragDetection(element, onDragLeft, onDragRight, onTouchEnd) {
    let startX = 0;
    let startY = 0;
    let isDragging = false;
    let isMobile = false;
    element.addEventListener('touchstart', (event) => {
      startX = event.touches[0].clientX;
      startY = event.touches[0].clientY;
      isDragging = true;
      isMobile = true;
    });
  
    element.addEventListener('touchmove', (event) => {
      if (!isDragging) return;
      const currentX = event.touches[0].clientX;
      const currentY = event.touches[0].clientY;
  
      const deltaX = currentX - startX;
      const deltaY = currentY - startY;
      const distance = Math.abs(deltaX);
  
      if (Math.abs(deltaX) > Math.abs(deltaY)) {
        if (deltaX > 0) {
          if (onDragRight) {
            onDragRight(distance);
          }
        } else {
          if (onDragLeft) {
            onDragLeft(distance);
          }
        }
      }
      startX = currentX;
      startY = currentY;
    });
  
    element.addEventListener('touchend', () => {
      if (onTouchEnd && isDragging) {
        onTouchEnd(isMobile);
      }
      isDragging = false;
    });
  
    element.addEventListener('mousedown', (event) => {
      startX = event.clientX;
      startY = event.clientY;
      isDragging = true;
      isMobile = false;
      event.preventDefault();
    });
  
    element.addEventListener('mousemove', (event) => {
      if (!isDragging) return;
  
      const currentX = event.clientX;
      const currentY = event.clientY;
  
      const deltaX = currentX - startX;
      const deltaY = currentY - startY;
      const distance = Math.abs(deltaX);
  
      if (Math.abs(deltaX) > Math.abs(deltaY)) {
        if (deltaX > 0) {
          if (onDragRight) {
            onDragRight(distance);
          }
        } else {
          if (onDragLeft) {
            onDragLeft(distance);
          }
        }
      }
  
      startX = currentX;
      startY = currentY;
    });
  
    element.addEventListener('mouseup', () => {
      if (onTouchEnd && isDragging) {
        onTouchEnd(isMobile);
      }
      isDragging = false;
    });
  
    element.addEventListener('contextmenu', (event) => {
      event.preventDefault();
    });
  }
  
  function marqueeFn(elName,bol){
    var content = document.querySelector("."+elName)
    var ul = content.querySelector(".marquee-box-list")
    var speed = 1;
    var width = content.clientWidth
    var swidth = ul.clientWidth
    var liWidthAll = 0
    let timer = null
    let isDouble = false
    let left =0
    if(width>swidth) isDouble = true
    if(bol){
      ul.innerHTML += isDouble?ul.innerHTML+ul.innerHTML:ul.innerHTML
    }
    ul.querySelectorAll(".marquee-box-item").forEach(item=>{
      liWidthAll+=item.offsetWidth+15
    })
    ul.style.width = liWidthAll + "px"
    function run() {
        if (left < -ul.offsetWidth / (isDouble?3:2)) {
            left = 0
        }
        if(left>0){
          left = -ul.offsetWidth / (isDouble?3:2)
        }
        left-=speed

        ul.style.transform =  'translateX('+left+'px)' 

      }
    
    timer = setInterval(run, 10)
    content.onmouseover = function() {
        clearInterval(timer)
    }
    content.onmouseout = function() {
      clearInterval(timer)
        timer = setInterval(run, 10)
    }

    enableDragDetection(ul,
      (distance) => {
        clearInterval(timer)
        left -=distance
        run()
      },
      (distance) => {
        clearInterval(timer)
        left +=distance
        run()
      },
      (isMobile) => {
      }
    );

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        const isHidden = entry.target.style.display === 'none';
        if (entry.isIntersecting) {
          clearInterval(timer)
          timer = setInterval(run, 10)
        } else {
          clearInterval(timer)
        }
        if (isHidden) {
          clearInterval(timer)
        } else {
          clearInterval(timer)
          timer = setInterval(run, 10)
        }
      });
    }, { attributes: true });
    observer.observe(content);
  }
  marqueeFn('marquee-box',true)
</script>
{% schema %}
{
"name": "media-evaluation-diy",
"class": "media-evaluation-diy",
"blocks": [
  {
    "name": "item",
    "type": "item",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "Image"
      },
      {
        "type": "text",
        "id": "text",
        "label": "Text"
      }
    ]
  }
],
  "presets": [
  {
    "name": "media-evaluation-diy",
    "blocks": []
  }
]
}
{% endschema %}