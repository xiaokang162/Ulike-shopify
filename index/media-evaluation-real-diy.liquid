<style>
  .media-evaluation-real-box {
    background: #f9f9f9;
    overflow: hidden;
    padding: 90px 0 60px;
    position: relative;
    z-index: 3;
  }

  .media-evaluation-real-box .media-evaluation-real {
    display: flex;
  }

  .media-evaluation-real-box .media-evaluation-real-item {
    background: #fff;
    margin-right: 25px;
    display: flex;
    width: 890px;
    align-items: center;
    flex-shrink: 0;
  }

  .media-evaluation-real-box .media-evaluation-real-img,
  .media-evaluation-real-box .media-evaluation-real-cont {
    width: 50%;
    position: relative;
  }

  .media-evaluation-real-box .media-real-img-item {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
    top: 0;
    left: 0;
    display: none;
    transition: opacity 0.4s ease;
  }

  .media-evaluation-real-box .media-real-img-item img {
    display: block;
    width: 100%;
    height: 100%;
    margin: 0;
    position: relative;
    z-index: 1;
    object-fit: cover;
  }

  .media-evaluation-real-box .media-real-img-item.active {
    display: block;
    position: relative;
  }

  .media-evaluation-real-box .media-real-img-item.close {
    z-index: 3;
    transition: height 0.6s ease;
    width: 100%;
    height: 0;
    display: block;
  }

  .media-evaluation-real-box .media-real-img-item.close img {
    width: 100%;
    height: auto;
  }

  .media-evaluation-real-box .media-evaluation-real-cont {
    padding: 0 80px;
  }

  .media-evaluation-real-box .media-evaluation-real-star {
    font-size: 22px;
    line-height: 1;
    color: #cc2e4d;
    position: relative;
    display: inline-block;
  }

  .media-evaluation-real-box .star-d {
    position: absolute;
    color: #eee;
    top: 0;
    right: 0;
    z-index: 3;
    transform: scale(1.01);
  }

  .media-evaluation-real-box .star-d span.hide {
    opacity: 0;
  }

  .media-evaluation-real-box .star-d span.show {
    opacity: 1;
    position: absolute;
    right: 0;
    top: 0;
    width: 50%;
    overflow: hidden;
    transform: scale(-1, 1);
  }

  .media-evaluation-real-box .media-evaluation-real-title {
    font-size: 25px;
    font-weight: bold;
    color: #000;
    line-height: 1.2;
    margin-top: 15px;
  }

  .media-evaluation-real-box .media-evaluation-real-p {
    font-size: 14px;
    color: #7f7f7f;
    line-height: 1.6;
    margin-top: 15px;
  }

  .media-evaluation-real-box .media-evaluation-real-name {
    font-size: 16px;
    color: #000;
    margin-top: 35px;
  }

  .media-evaluation-real-box .media-evaluation-real-name .span {
    display: inline-block;
    margin-right: 5px;
    color: #d5d5d5;
  }

  .media-evaluation-real-box .media-evaluation-real-arrow {
    position: absolute;
    display: flex;
    left: 50%;
    bottom: 40px;
    transform: translateX(-50%);
    z-index: 3;
  }

  .media-evaluation-real-box .media-real-arrow-item {
    cursor: pointer;
    margin-right: 18px;
    overflow: hidden;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    /* border: 2px solid #000; */
    background: #fff;
    position: relative;
    transition: all 0.4s ease;
  }

  .media-evaluation-real-box .media-real-arrow-item::before {
    position: absolute;
    content: "";
    display: block;
    width: 12px;
    height: 12px;
    border-top: 2px solid #000;
    border-left: 2px solid #000;
    top: 50%;
    left: 50%;
    margin-left: 2px;
    transform: translate(-50%, -50%) rotate(-45deg);
    transition: all 0.4s ease;
  }

  .media-evaluation-real-box .media-real-arrow-item:nth-child(2) {
    transform: scale(-1, -1);
  }

  .media-evaluation-real-box .media-real-arrow-item:hover {
    background: #000;
  }

  .media-evaluation-real-box .media-real-arrow-item:hover::before {
    border-color: #fff;
  }

  .media-evaluation-real-box .media-real-bottom {
    display: flex;
    align-items: center;
    margin-top: 60px;
  }

  .media-evaluation-real-box .media-real-dot {
    display: flex;
    flex: 1;
    background: #f1f1f1;
    height: 2px;
  }

  .media-evaluation-real-box .media-real-dot-item {
    flex: 1;
    height: 2px;
    position: relative;
  }

  .media-evaluation-real-box .media-real-dot-item::before {
    position: absolute;
    content: "";
    display: block;
    width: 0;
    height: 100%;
    background: #000;
    left: 0;
    top: 0;
  }

  .media-evaluation-real-box .media-real-dot-item.active::before {
    width: 100%;
  }

  .media-evaluation-real-box .media-real-dot-item.active.tra::before {
    transition: width 5s linear;
  }

  .media-evaluation-real-box .media-real-arrow {
    display: flex;
    margin-left: 10px;
  }

  .media-evaluation-real-box .media-real-bottom-arrow-item {
    cursor: pointer;
    margin-left: 20px;
    overflow: hidden;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    position: relative;
    transition: all 0.4s ease;
  }

  .media-evaluation-real-box .media-real-bottom-arrow-item::before {
    position: absolute;
    content: "";
    display: block;
    width: 12px;
    height: 12px;
    border-top: 2px solid #d5d5d5;
    border-left: 2px solid #d5d5d5;
    top: 50%;
    left: 50%;
    margin-left: 2px;
    transform: translate(-50%, -50%) rotate(-45deg);
    transition: all 0.4s ease;
  }

  .media-evaluation-real-box .media-real-bottom-arrow-item:nth-child(2) {
    transform: scale(-1, -1);
  }

  .media-evaluation-real-box .media-real-bottom-arrow-item:hover::before {
    border-color: #000;
  }

  @media(max-width: 890px) {
    .media-evaluation-real-box {
      padding: 50px var(--container-gutter);
      overflow: hidden;
    }

    .media-evaluation-real-box .media-evaluation-real-item {
      width: 100%;
      flex-direction: column-reverse;
    }

    .media-evaluation-real-box .media-evaluation-real-img,
    .media-evaluation-real-box .media-evaluation-real-cont {
      width: 100%;
    }

    .media-evaluation-real-box .media-evaluation-real-cont {
      flex: 1;
    }

    .media-evaluation-real-box .media-evaluation-real-cont {
      padding: 30px;
    }

    .media-evaluation-real-box .media-real-dot {
      display: none;
    }

    .media-evaluation-real-box .media-real-bottom {
      justify-content: center;
    }

    .media-evaluation-real-box .media-real-arrow {
      margin-left: 0;
    }

    .media-evaluation-real-box .media-real-bottom-arrow-item {
      margin: 0 10px;
    }

    .media-evaluation-real-box .media-real-bottom {
      margin-top: 30px;
    }
  }
</style>
<section class="section-box">
  <div class="media-evaluation-real-box">
    <div class="media-evaluation-real">
      {%- for block in section.blocks -%}
      <div class="media-evaluation-real-item to-top" style="transition-delay: 0.{{forloop.index}}s">
        <div class="media-evaluation-real-cont">
          <div class="media-evaluation-real-star to-top" data-num="{{block.settings.star}}">
            {%- if block.settings.half -%}
            <div class="star-d">
              <span class="hide">★</span>
              <span class="show">★</span>
            </div>
            {%- endif -%}
          </div>
          {%- if block.settings.title != blank -%}
          <div class="media-evaluation-real-title text-top" style="transition-delay: 0.1s">{{ block.settings.title }}
          </div>
          {%- endif -%}
          {%- if block.settings.content != blank -%}
          <div class="media-evaluation-real-p text-top" style="transition-delay: 0.1s">{{ block.settings.content }}
          </div>
          {%- endif -%}
          {%- if block.settings.name != blank -%}
          <div class="media-evaluation-real-name text-top" style="transition-delay: 0.6s"><span class="span">-</span> {{
            block.settings.name }}</div>
          {%- endif -%}
        </div>
        <div class="media-evaluation-real-img to-top">
          <div class="media-real-img-item active">
            {%- if block.settings.image != blank and block.settings.image1 != blank -%}
            <picture class="dropdown__picture">
              <source srcset="{{block.settings.image1}}" media="(max-width: 890px)">
              <source srcset="{{block.settings.image}}" media="(min-width: 891px)">
              <img loading="lazy" width="{{ block.settings.image.width }}" height="{{ block.settings.image.height }}" {% render 'image-attributes' , image: block.settings.image %} alt="{{ block.settings.image.alt | escape }}">
            </picture>
            {%- endif -%}
          </div>
        </div>
    </div>
    {%- endfor -%}
  </div>
  <div class="container">
    <div class="media-real-bottom">
      <div class="media-real-dot to-top">
        {%- for block in section.blocks -%}
          <div class="media-real-dot-item"></div>
        {%- endfor -%}
      </div>
      <div class="media-real-arrow to-top">
        <div class="media-real-bottom-arrow-item"></div>
        <div class="media-real-bottom-arrow-item"></div>
      </div>
    </div>
  </div>
  </div>
</section>
<script>
  (function() {
    function mediaRealSlider(name) {
      let $p = $(name)
      let $list = $p.find('.media-evaluation-real')
      let $dot = $p.find('.media-real-dot')
      let $bottomArrow = $p.find('.media-real-arrow')
      let length = $list.find('.media-evaluation-real-item').length
      let index = -2 //[0,-length-2]
      let isLeftBtn = 1 //0左 1右
      let timer = null
      let timers = null
      let dateTb = 0
      let dateTs = 0
      if (length < 2) return

      $list.html(
        $list.find('.media-evaluation-real-item')[length - 2].outerHTML +
        $list.find('.media-evaluation-real-item')[length - 1].outerHTML +
        $list.html() +
        $list.find('.media-evaluation-real-item')[0].outerHTML +
        $list.find('.media-evaluation-real-item')[1].outerHTML)
      skewTransform(true)
      changeDot()
      $p.find('.media-real-bottom-arrow-item').click(function () {
        let sIndex = $(this).index()
        if (+new Date() - dateTb < 600) return
        dateTb = +new Date()
        isLeftBtn = sIndex
        index += sIndex ? -1 : 1
        clearInterval(timer)
        changeLeft()
        timer = setInterval(() => {
          isLeftBtn = 1
          index--
          changeLeft()
        }, 5000);
      })
      function skewTransform(auto, tIndex = index, skew = 0) {
        let width = $list.find('.media-evaluation-real-item').eq(Math.abs(tIndex) - 1).width()
        let translateX = (width + 25) * tIndex
        if (auto) {
          translateX += skew
          $list.css({
            'transform': 'translateX(' + translateX + 'px)',
            'transition': ' all 0s ease'
          })
        } else {
          $list.css({
            'transform': 'translateX(' + translateX + 'px)',
            'transition': ' all .6s ease'
          })
        }
      }
      function changeLeft(skew) {
        if (isLeftBtn && index == (-length - 2)) {
          skewTransform(true, -1, skew)
          index = -2
        }

        if (!isLeftBtn && index == 0) {
          skewTransform(true, -length - 1, skew)
          index = -length
        }
        setTimeout(() => {
          skewTransform()
        }, 10);
        changeDot()
      }
      function changeDot() {
        $p.find('.media-real-dot-item').removeClass('active')
        setTimeout(() => {
          $p.find('.media-real-dot-item').each(function () {
            let sIndex = $(this).index()
            // if(sIndex<Math.abs(index)-2){
            //     $(this).addClass('active')
            // }
            if (sIndex == (Math.abs(index) - 2)) {
              $(this).addClass('active')
            }
          })
          if (index == -1) {
            $p.find('.media-real-dot-item').eq(length - 1).addClass('active')
          }
        }, 20);
      }
      function getTranslateX($element) {
        var matrix = $element.css('transform').replace(/[^0-9\-.,]/g, '').split(',');
        var translateX = parseFloat(matrix[12] || matrix[4]);
        return translateX;
      }
      function initMobileCarousel() {
        let startX = 0;
        let listTar = 0
        let startY = 0;
        let isScrolling = false;

        $list.on('touchstart', function (e) {
          var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
          startX = touch.clientX;
          startY = touch.clientY;
          isScrolling = false;
          listTar = getTranslateX($list)
          clearInterval(timer)

        });

        $list.on('touchmove', function (e) {
          var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
          var diffX = touch.clientX - startX;
          var diffY = touch.clientY - startY;
          var translateX = listTar + diffX;
          if (!isScrolling) {
            if (Math.abs(diffX) > Math.abs(diffY)) {
              isScrolling = true;
            }
          }

          if (isScrolling && e.cancelable) {
            e.preventDefault();
            $list.css({ 'transform': 'translateX(' + translateX + 'px)', 'transition': 'all 0s ease' });
          }
        });

        $list.on('touchend', function (e) {
          if (isScrolling) {
            var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
            var diffX = touch.clientX - startX;
            if (Math.abs(diffX) > window.innerWidth * 0.05) {
              if (diffX > 0) {
                index = index + 1;
                isLeftBtn = 0
              } else {
                index = index - 1;
                isLeftBtn = 1
              }
            }
            changeLeft(diffX)
            timer = setInterval(() => {
              isLeftBtn = 1
              index--
              changeLeft()
            }, 5000);
          }
          isScrolling = false;
        });
      }
      initMobileCarousel()

      timer = setInterval(() => {
        isLeftBtn = 1
        index--
        changeLeft()
      }, 5000);

      // 图片轮播
      $p.on('click', '.media-real-arrow-item', function () {
        let $this = $(this)
        let bIndex = $this.index()
        let $list = $this.closest('.media-evaluation-real-img')
        if (+new Date() - dateTs < 600) return
        dateTs = +new Date()
        clearInterval(timers)
        changeImg($list, bIndex)
        timers = setInterval(() => {
          loopImg()
        }, 3800);
      })

      function changeImg($list, btnIndex) {
        let dotIndex = $list.find('.media-real-img-item.active').index()
        let length = $list.find('.media-real-img-item').length
        if (btnIndex != undefined) {
          dotIndex += btnIndex ? 1 : -1
        } else {
          dotIndex++
        }
        if (dotIndex == length) dotIndex = 0
        if (dotIndex < 0) dotIndex = length - 1
        $list.find('.media-real-img-item.active').removeClass('active').addClass('close')
        $list.find('.media-real-img-item').eq(dotIndex).addClass('active')
        setTimeout(() => {
          $list.find('.media-real-img-item.close').removeClass('close')
        }, 600)
      }
      function loopImg() {
        $p.find('.media-evaluation-real-img').each(function () {
          changeImg($(this))
        })
      }

      // timers = setInterval(() => {
      //     loopImg()             
      // }, 3800);

      $list.hover(function () {
        clearInterval(timer)
      }, function () {
        timer = setInterval(() => {
          isLeftBtn = 1
          index--
          changeLeft()
        }, 5000);
      })
    }
    window.addEventListener('load', function () {
      mediaRealSlider('#shopify-section-{{ section.id }}')
      const generateStars = score => '★★★★★'.slice(0, score) + ''.slice(score);
      document.querySelectorAll('.media-evaluation-real-star').forEach( item =>{
        let num = item.getAttribute('data-num')*1
        item.innerText = generateStars(num)
      })
    })
  })();
</script>
{% schema %}
{
"name": "media-evaluation-real",
"class": "media-evaluation-real-diy",
"blocks": [
    {
    "name": "item",
    "type": "item",
    "settings": [
      {
        "type": "image_picker",
        "id": "image",
        "label": "Image"
      },
      {
        "type": "image_picker",
        "id": "image1",
        "label": "Mobile Image"
      },
      {
        "type": "range",
        "id": "star",
        "min": 1,
        "max": 5,
        "step": 1,
        "label": "Star",
        "default": 5
      },
      {
        "type": "checkbox",
        "id": "half",
        "label": "0.5",
        "default": false
      },
      {
        "type": "text",
        "id": "title",
        "label": "Title"
      },
      {
        "type": "text",
        "id": "content",
        "label": "Content"
      },
      {
        "type": "text",
        "id": "name",
        "label": "Name"
      }
    ]
    }
  ],
  "settings": [
    {
      "type": "color",
      "id": "background",
      "label": "Background",
      "default": "rgba(0,0,0,0)"
    }
  ],
  "presets": [
    {
      "name": "media-evaluation-real",
      "blocks": []
    }
  ]
}
{% endschema %}