<style>
  
.review-video {
  position: relative;
  background: #f9f9f9;
  height: 70vh;
  overflow: hidden;
}

.review-video .webgl {
  pointer-events: none;
  position: relative;
  z-index: 1;
}

.review-video::before {
  width: 100%;
  height: 70%;
  position: absolute;
  content: '';
  display: block;
  z-index: 2;
  left: 0;
  bottom: 0;
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.9) 100%
  );
}

.review-video .review-video-text {
  position: absolute;
  width: 100%;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  z-index: 3;
}

.review-video .review-video-p {
  font-size: 60px;
  color: #000;
  font-family: var(--heading-font-family);
  max-width: 925px;
  margin: 0 auto;
  text-align: center;
  line-height: 1.2;
}

.review-video .review-video-play .play-btn {
  cursor: pointer;
  position: relative;
  border-radius: 50%;
  width: 86px;
  height: 86px;
  transition: all 0.4s ease;
  border: 2px solid #000;
  margin: 0 auto;
  margin-top: 50px;
  background: #000;
}

.review-video .play-btn .span1 {
  position: absolute;
  display: block;
  width: 160%;
  height: 160%;
  border: 1px solid #000;
  border-radius: 50%;
  animation: bounce-circle 1.8s infinite;
  animation-delay: 400ms;
  left: -30%;
  top: -30%;
  pointer-events: none;
  overflow: hidden;
}

.review-video .review-video-play .play-btn::after {
  position: absolute;
  content: '';
  display: block;
  width: 0;
  height: 0;
  border-top: 16px solid transparent;
  border-bottom: 16px solid transparent;
  border-left: 23px solid #fff;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  margin-left: 5px;
  transition: all 0.4s ease;
}
.review-video .review-video-play .play-btn:before {
  content: '';
  position: absolute;
  display: block;
  width: 160%;
  height: 160%;
  border: 1px solid #000;
  border-radius: 50%;
  z-index: -3;
  animation: bounce-circle 1.8s infinite;
  animation-delay: 0s;
  box-sizing: border-box;
  left: -30%;
  top: -30%;
  pointer-events: none;
}
@keyframes bounce-circle {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }

  20% {
    opacity: 1;
  }

  80%,
  100% {
    opacity: 0;
    transform: scale(1.3);
  }
}

.review-video .review-video-play .play-btn:hover {
  background: #fff;
  overflow: hidden;
}

.review-video .review-video-play .play-btn:hover::after {
  border-left-color: #000;
}

@media (max-width:1200px) {
  .review-video .review-video-p{
    font-size: 50px;
  }
}

@media (max-width:991px) {
  .review-video .review-video-p{
    font-size: 35px;
  }
  .review-video .review-video-play .play-btn{
    width: 60px;
    height: 60px;
  }
}

@media (max-width:640px) {
  .review-video .review-video-p{
    font-size: 28px;
  }
  .review-video .review-video-play .play-btn::after{
    zoom: .6;
  }
}

.brand-story-popup {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  z-index: 99;
  background: rgba(0, 0, 0, 0.6);
  display: none;
}

.brand-story-popup .brand-story-popup-cont {
  position: absolute;
  width: 90%;
  max-width: 1000px;
  /* background: #eee; */
  height: 0;
  padding-top: 56.25%;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
.brand-story-popup .brand-story-popup-video {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

.brand-story-popup .brand-story-popup-video iframe {
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
}

.brand-story-popup .brand-story-popup-close {
  width: 45px;
  height: 45px;
  border-radius: 50%;
  border: 2px solid #fff;
  margin: 0 auto;
  margin-top: 40px;
  cursor: pointer;
  position: relative;
  transition: all 0.6s ease;
}
.brand-story-popup .brand-story-popup-close:hover {
  transform: rotate(360deg);
}

.brand-story-popup .brand-story-popup-close::after,
.brand-story-popup .brand-story-popup-close::before {
  position: absolute;
  content: '';
  display: block;
  width: 2px;
  height: 22px;
  background: #fff;
  top: 50%;
  left: 50%;
}

.brand-story-popup .brand-story-popup-close::after {
  transform: translate(-50%, -50%) rotate(-45deg);
}

.brand-story-popup .brand-story-popup-close::before {
  transform: translate(-50%, -50%) rotate(45deg);
}

@media (max-width:1919px) and (min-width:1000px) {
  .brand-story-popup .brand-story-popup-cont{
      padding-top: 366px;
      max-width: 650px;
    }
  }
  
  @media (min-width:1920px) {
    .brand-story-popup .brand-story-popup-cont{
      padding-top: 565.34px;
    }
  }

@media (max-width: 768px) {
  .review-video {
    height: 60vh;
  }
}
</style>
<section class="section-box">

<div class="review-video">
  <canvas class="webgl"></canvas>
  <div class="review-video-text">
    <div class="container">
      <div class="review-video-p to-top">
        {{ section.settings.title }}
      </div>
      <div class="review-video-play to-top" style="transition-delay: 0.1s" data-src="https://www.youtube.com/embed/{{ section.settings.video_url.id }}?playsinline=1&autoplay=1&controls=1&mute=1&loop=1&playlist={{ section.settings.video_url.id }}&enablejsapi=1&rel=0&modestbranding=1&origin={{ 'https://' | append: request.host | url_encode }}">
        <div class="play-btn">
            <span class="span1"></span>
        </div>
    </div>
    </div>
  </div>
</div>
<div class="brand-story-popup">
  <div class="brand-story-popup-cont">
    <div class="brand-story-popup-video">
      <iframe title="" src="" allow="autoplay;" allowfullscreen="allowfullscreen"></iframe>
    </div>
    <div class="brand-story-popup-close">
    </div>
  </div>
</div>

<script>
  window.addEventListener('load',function(){
    $('html').on('click','.review-video .review-video-play',function(){
      $('.brand-story-popup iframe').attr('src',$(this).attr('data-src'))
      $('.brand-story-popup').fadeIn()
    })
    $('html').on('click','.brand-story-popup .brand-story-popup-close',function(){
      $('.brand-story-popup').fadeOut()
      $('.brand-story-popup iframe').attr('src','')
    })
  })
</script>

<script type="x-shader/x-fragment" id="fragmentShader">
  uniform float actionRatio;
  uniform float lineLength;
  uniform vec3 diffuse;
  uniform float opacity;
  uniform float dashSize;
  uniform float totalSize;
  varying float vLineDistance;
  
  #include <common>
  #include <color_pars_fragment>
  #include <fog_pars_fragment>
  #include <logdepthbuf_pars_fragment>
  #include <clipping_planes_pars_fragment>
  
  void main() {
    #include <clipping_planes_fragment>
  
    float halfDash = dashSize * 0.5;
    float currPos = (lineLength + dashSize) * actionRatio;
    float d = (vLineDistance + halfDash) - currPos;
    if (abs(d) > halfDash ) discard;
  
    float grad = ((vLineDistance + halfDash) - (currPos - halfDash)) / halfDash;
    vec3 outgoingLight = vec3( 0.0 );
    vec4 diffuseColor = vec4( diffuse, grad );
  
    #include <logdepthbuf_fragment>
    #include <color_fragment>
    outgoingLight = diffuseColor.rgb;
    #include <opaque_fragment>
    #include <tonemapping_fragment>
    #include <colorspace_fragment>
    #include <fog_fragment>
    #include <premultiplied_alpha_fragment>
  }
</script>

<script type="module">
  // import * as THREE from "three";

  // import { OrbitControls } from "three/addons/OrbitControls.js";
  // import TWEEN from 'three/addons/tween.module.js';
  // import { mergeGeometries } from 'three/addons/BufferGeometryUtils.js';
  import * as THREE from "https://cdn.shopify.com/s/files/1/0656/9079/6273/files/three.module.min.js";
    import {
      OrbitControls
    } from "https://cdn.shopify.com/s/files/1/0656/9079/6273/files/OrbitControls.js";
    import TWEEN from 'https://cdn.shopify.com/s/files/1/0656/9079/6273/files/tween.module.js';
    import {BufferGeometryUtils} from "https://unpkg.com/three@0.127.0/examples/jsm/utils/BufferGeometryUtils.js";
  let lineFragmentShader = document.getElementById( 'fragmentShader' ).textContent;
  let reviewVideo = document.querySelector('.review-video')
  
  initThree()
  
   function initThree(){
    let earth;
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(45, reviewVideo.clientWidth / reviewVideo.clientHeight, .01, 50);
    camera.position.set(0, 1, 7.5);
  
    const renderer = new THREE.WebGLRenderer({
      canvas: document.querySelector('canvas.webgl'),
      antialias: true,
      alpha: true
    });
    renderer.setSize(reviewVideo.clientWidth, reviewVideo.clientHeight);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.enablePan = false;
    controls.noZoom = true;
    controls.noRotate = true;
    controls.enabled = false
  
    let params = {
      colors: { base: '#eee', gradInner: '#eee', gradOuter: '#eee' },
      reset: () => {controls.reset()}
    }
  
    let maxImpactAmount = 10;
    let impacts = [];
    let trails = [];
    for (let i = 0; i < maxImpactAmount; i++) {
      impacts.push({
      impactPosition: new THREE.Vector3().random().subScalar(0.5).setLength(5),
      impactMaxRadius: 5 * THREE.MathUtils.randFloat(0.5, 0.75),
      impactRatio: 0,
      prevPosition: new THREE.Vector3().random().subScalar(0.5).setLength(5),
      trailRatio: { value: 0 },
      trailLength: { value: 0 }
      });
      makeTrail(i);
    }
  
    let uniforms = {
      impacts: {
      value: impacts
      },
      maxSize: {
      value: 0.06
      },
      minSize: {
      value: 0.009
      },
      waveHeight: {
      value: 0.1
      },
      scaling: {
      value: 1
      },
      gradInner: {
      value: new THREE.Color(params.colors.gradInner)
      },
      gradOuter: {
      value: new THREE.Color(params.colors.gradOuter)
      }
    }
  
    var tweens = [];
  
    for (let i = 0; i < maxImpactAmount; i++) {
      tweens.push({
      runTween: () => {
        let path = trails[i];
        let speed = 3;
        let len = path.geometry.attributes.lineDistance.array[99];
        let dur = len / speed;
        let tweenTrail = new TWEEN.Tween({value: 0})
        .to({value: 1}, dur * 1000)
        .onUpdate( val => {
          impacts[i].trailRatio.value = val.value;
        });
        var tweenImpact = new TWEEN.Tween({ value: 0 })
        .to({ value: 1 }, THREE.MathUtils.randInt(2500, 5000))
        .onUpdate(val => {
          uniforms.impacts.value[i].impactRatio = val.value;
        })
        .onComplete(val => {
          impacts[i].prevPosition.copy(impacts[i].impactPosition);
          impacts[i].impactPosition.random().subScalar(0.5).setLength(5);
          setPath(path, impacts[i].prevPosition, impacts[i].impactPosition, 1);
          uniforms.impacts.value[i].impactMaxRadius = 5 * THREE.MathUtils.randFloat(0.5, 0.75);
          tweens[i].runTween();
        });
        tweenTrail.chain(tweenImpact);
        tweenTrail.start();
      }
      });
    }
  
    tweens.forEach(t => {t.runTween();})
    makeGlobeOfPoints();
    window.addEventListener('resize', onWindowResize);
  
    renderer.setAnimationLoop( _ => {
      TWEEN.update();
      earth.rotation.y += 0.002;
      renderer.render(scene, camera);
    });
  
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
  
    function makeGlobeOfPoints(){
      let dummyObj = new THREE.Object3D();
      let p = new THREE.Vector3();
      let sph = new THREE.Spherical();
      let geoms = [];
      let tex = new THREE.TextureLoader().load('./images8/earth1.jpg');
      let counter = 75000;
      let rad = 5;
      let r = 0;
      let dlong = Math.PI * (3 - Math.sqrt(5));
      let dz = 2 / counter;
      let long = 0;
      let z = 1 - dz / 2;
      for (let i = 0; i < counter; i++) {
      r = Math.sqrt(1 - z * z);
      p.set( Math.cos(long) * r, z, -Math.sin(long) * r).multiplyScalar(rad);
      z = z - dz;
      long = long + dlong;
      sph.setFromVector3(p);
      dummyObj.lookAt(p);
      dummyObj.updateMatrix();
      let g =  new THREE.PlaneGeometry(1, 1);
      g.applyMatrix4(dummyObj.matrix);
      g.translate(p.x, p.y, p.z);
      let centers = [
        p.x, p.y, p.z,
        p.x, p.y, p.z,
        p.x, p.y, p.z,
        p.x, p.y, p.z
      ];
      let uv = new THREE.Vector2(
        (sph.theta + Math.PI) / (Math.PI * 2),
        1. - sph.phi / Math.PI
      );
      let uvs = [
        uv.x, uv.y,
        uv.x, uv.y,
        uv.x, uv.y,
        uv.x, uv.y
      ];
      g.setAttribute('center', new THREE.Float32BufferAttribute(centers, 3));
      g.setAttribute('baseUv', new THREE.Float32BufferAttribute(uvs, 2));
      geoms.push(g);
      }
      let g = BufferGeometryUtils.mergeBufferGeometries(geoms);
      let m = new THREE.MeshBasicMaterial({
      color: new THREE.Color(params.colors.base),
      onBeforeCompile: shader => {
        shader.uniforms.impacts = uniforms.impacts;
        shader.uniforms.maxSize = uniforms.maxSize;
        shader.uniforms.minSize = uniforms.minSize;
        shader.uniforms.waveHeight = uniforms.waveHeight;
        shader.uniforms.scaling = uniforms.scaling;
        shader.uniforms.gradInner = uniforms.gradInner;
        shader.uniforms.gradOuter = uniforms.gradOuter;
        shader.uniforms.tex = {value: tex};
        shader.vertexShader = `
        struct impact {
          vec3 impactPosition;
          float impactMaxRadius;
          float impactRatio;
        };
        uniform impact impacts[${maxImpactAmount}];
        uniform sampler2D tex;
        uniform float maxSize;
        uniform float minSize;
        uniform float waveHeight;
        uniform float scaling;
  
        attribute vec3 center;
        attribute vec2 baseUv;
  
        varying float vFinalStep;
        varying float vMap;
  
        ${shader.vertexShader}
        `.replace(
        `#include <begin_vertex>`,
        `#include <begin_vertex>
        float finalStep = 0.0;
        for (int i = 0; i < ${maxImpactAmount};i++){
          float dist = distance(center, impacts[i].impactPosition);
          float curRadius = impacts[i].impactMaxRadius * impacts[i].impactRatio;
          float sstep = smoothstep(0., curRadius, dist) - smoothstep(curRadius - ( 0.25 * impacts[i].impactRatio ), curRadius, dist);
          sstep *= 1. - impacts[i].impactRatio;
          finalStep += sstep;
        }
        finalStep = clamp(finalStep, 0., 1.);
        vFinalStep = finalStep;
  
        float map = texture(tex, baseUv).g;
        vMap = map;
        float pSize = map < 0.5 ? maxSize : minSize;
        float scale = scaling;
  
        transformed = (position - center) * pSize * mix(1., scale * 1.25, finalStep) + center; // scale on wave
        transformed += normal * finalStep * waveHeight; // lift on wave
        `
        );
        shader.fragmentShader = `
        uniform vec3 gradInner;
        uniform vec3 gradOuter;
        varying float vFinalStep;
        varying float vMap;
        ${shader.fragmentShader}
        `.replace(
        `vec4 diffuseColor = vec4( diffuse, opacity );`,
        `
        // shaping the point, pretty much from The Book of Shaders
        vec2 hUv = (vUv - 0.5);
        int N = 8;
        float a = atan(hUv.x,hUv.y);
        float r = PI2/float(N);
        float d = cos(floor(.5+a/r)*r-a)*length(hUv);
        float f = cos(PI / float(N)) * 0.5;
        if (d > f) discard;
  
        vec3 grad = mix(gradInner, gradOuter, clamp( d / f, 0., 1.)); // gradient
        vec3 diffuseMap = diffuse * ((vMap > 0.5) ? 0.5 : 1.);
        vec3 col = mix(diffuseMap, grad, vFinalStep); // color on wave
        //if (!gl_FrontFacing) col *= 0.25; // moderate the color on backside
        vec4 diffuseColor = vec4( col , opacity );
        `
        );
      }
      });
      m.defines = {'USE_UV':''};
      earth = new THREE.Mesh(g, m);
      earth.rotation.y = Math.PI;
      trails.forEach(t => {earth.add(t)});
      earth.position.set(0, -2.6, 0);
      scene.add(earth);
    }
  
    function makeTrail(idx){
      let pts = new Array(100 * 3).fill(0);
      let g = new THREE.BufferGeometry();
      g.setAttribute("position", new THREE.Float32BufferAttribute(pts, 3));
      let m = new THREE.LineDashedMaterial({
      color: params.colors.gradOuter,
      transparent: true,
      onBeforeCompile: shader => {
        shader.uniforms.actionRatio = impacts[idx].trailRatio;
        shader.uniforms.lineLength = impacts[idx].trailLength;
        shader.fragmentShader = lineFragmentShader;
      }
      });
      let l = new THREE.Line(g, m);
      l.userData.idx = idx;
      setPath(l, impacts[idx].prevPosition, impacts[idx].impactPosition, 1);
      trails.push(l);
    }
  
    function setPath(l, startPoint, endPoint, peakHeight, cycles) {
      let pos = l.geometry.attributes.position;
      let division = pos.count - 1;
      let cycle = cycles || 1;
      let peak = peakHeight || 1;
      let radius = startPoint.length();
      let angle = startPoint.angleTo(endPoint);
      let arcLength = radius * angle;
      let diameterMinor = arcLength / Math.PI;
      let radiusMinor = (diameterMinor * 0.5) / cycle;
      let peakRatio = peak / diameterMinor;
      let radiusMajor = startPoint.length() + radiusMinor;
      let basisMajor = new THREE.Vector3().copy(startPoint).setLength(radiusMajor);
      let basisMinor = new THREE.Vector3().copy(startPoint).negate().setLength(radiusMinor);
      let tri = new THREE.Triangle(startPoint, endPoint, new THREE.Vector3());
      let nrm = new THREE.Vector3();
      tri.getNormal(nrm);
      let v3Major = new THREE.Vector3();
      let v3Minor = new THREE.Vector3();
      let v3Inter = new THREE.Vector3();
      let vFinal = new THREE.Vector3();
      for (let i = 0; i <= division; i++) {
      let divisionRatio = i / division;
      let angleValue = angle * divisionRatio;
      v3Major.copy(basisMajor).applyAxisAngle(nrm, angleValue);
      v3Minor.copy(basisMinor).applyAxisAngle(nrm, angleValue + Math.PI * 2 * divisionRatio * cycle);
      v3Inter.addVectors(v3Major, v3Minor);
      let newLength = ((v3Inter.length() - radius) * peakRatio) + radius;
      vFinal.copy(v3Inter).setLength(newLength);
      pos.setXYZ(i, vFinal.x, vFinal.y, vFinal.z);
      }
      pos.needsUpdate = true;
      l.computeLineDistances();
      l.geometry.attributes.lineDistance.needsUpdate = true;
      impacts[l.userData.idx].trailLength.value = l.geometry.attributes.lineDistance.array[99];
      l.material.dashSize = 3;
    }
  
    function onWindowResize() {
      camera.aspect = reviewVideo.clientWidth / reviewVideo.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(reviewVideo.clientWidth, reviewVideo.clientHeight);
    }
    }
</script>
</section>
{% schema %}
  {
    "name": "review-video",
    "class": "review-video",
    "blocks": [],
    "settings": [
      {
        "type": "text",
        "id": "title",
        "label": "Title"
      },
      {
        "type": "video_url",
        "id": "video_url",
        "accept": ["vimeo", "youtube"],
        "label": "External video",
        "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc"
      }
    ],
    "presets": [
      {
        "name": "review-video",
        "blocks": []
      }
    ]
  }
{% endschema %}